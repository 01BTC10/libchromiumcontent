#!/usr/bin/env python

import argparse
import contextlib
import errno
import glob
import os
import shutil
import subprocess
import sys
import zipfile

from lib.util import get_configuration, get_output_dir


SOURCE_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
DIST_DIR = os.path.join(SOURCE_ROOT, 'dist')
SRC_DIR = os.path.join(SOURCE_ROOT, 'vendor', 'chromium', 'src')

# Almost everything goes into the main zip file...
MAIN_DIR = os.path.join(DIST_DIR, 'main')
DIST_SRC_DIR = os.path.join(MAIN_DIR, 'src')
# ...except symbols, which are so huge we want to be able to download them
# separately.
SYMBOLS_DIR = os.path.join(DIST_DIR, 'symbols')

TARGET_PLATFORM = {
  'cygwin': 'win32',
  'darwin': 'darwin',
  'linux2': 'linux',
  'win32': 'win32',
}[sys.platform]

SHARED_LIBRARY_SUFFIX = {
  'darwin': 'dylib',
  'linux': 'so',
  'win32': 'dll',
}[TARGET_PLATFORM]
STATIC_LIBRARY_SUFFIX = {
  'darwin': 'a',
  'linux': 'a',
  'win32': 'lib',
}[TARGET_PLATFORM]

COMPONENTS = ['static_library', 'shared_library']
BINARIES = {
  'all': [
    'content_shell.pak',
    'icudtl.dat',
    'natives_blob.bin',
    'snapshot_blob.bin',
    os.path.join('gen', 'content', 'app', 'resources', 'content_resources_200_percent.pak'),
    os.path.join('gen', 'ui', 'resources', 'ui_resources_200_percent.pak'),
  ],
  'darwin': [
    'chromedriver',
    'libboringssl.dylib',
    'ffmpegsumo.so',
    'mksnapshot',
  ],
  'linux': [
    'chromedriver',
    'libboringssl.so',
    'libffmpegsumo.so',
    'libosmesa.so',
    'mksnapshot',
  ],
  'win32': [
    'chromedriver.exe',
    'ffmpegsumo.dll',
    'libEGL.dll',
    'libGLESv2.dll',
    'mksnapshot.exe',
    os.path.join('obj', 'base', 'base_static.cc.pdb'),
    os.path.join('obj', 'base', 'third_party', 'dynamic_annotations', 'dynamic_annotations.lib'),
    os.path.join('obj', 'base', 'third_party', 'dynamic_annotations', 'dynamic_annotations.c.pdb'),
    os.path.join('obj', 'third_party', 'iaccessible2', 'iaccessible2.c.pdb'),
    os.path.join('obj', 'third_party', 'libxml', 'libxml.c.pdb'),
    os.path.join('obj', 'third_party', 'libxml', 'libxml.cc.pdb'),
    os.path.join('obj', 'third_party', 'zlib', 'zlib.c.pdb'),
    os.path.join('obj', 'ui', 'content_accelerators', 'ui_content_accelerators.cc.pdb'),
    os.path.join('obj', 'ui', 'display', 'display.cc.pdb'),
    os.path.join('obj', 'ui', 'views', 'controls', 'webview', 'webview.cc.pdb'),
    os.path.join('obj', 'ui', 'views', 'views.cc.pdb'),
    os.path.join('obj', 'ui', 'web_dialogs', 'web_dialogs.cc.pdb'),
    os.path.join('obj', 'ui', 'wm', 'wm.cc.pdb'),
  ],
}

SYMBOLS = {
  'darwin': [
    # OS X has a more complicated symbol creation process. See
    # create_dsym() and copy_symbols().
  ],
  'linux': [
    'libffmpegsumo.so.dbg',
    'libosmesa.so.dbg',
  ],
  'win32': [
    'ffmpegsumo.dll.pdb',
    'libGLESv2.dll.pdb',
  ],
}

# Emperically determined to be required by client apps.
INCLUDE_DIRS = [
  'base',
  'build',
  'cc',
  'chrome/browser/ui/libgtk2ui',
  'components/os_crypt',
  'content/browser',
  'content/common',
  'content/public',
  'content/renderer',
  'crypto',
  'ipc',
  'gin',
  'gpu',
  'media',
  'mojo',
  'net',
  'printing',
  'sandbox',
  'skia',
  'storage',
  'testing',
  'third_party/boringssl',
  'third_party/WebKit/Source/platform',
  'third_party/WebKit/Source/wtf',
  'third_party/WebKit/public',
  'third_party/icu/source',
  'third_party/skia',
  'third_party/wtl/include',
  'ui',
  'url',
  'v8/include',
  'webkit',
] + {
  'darwin': [],
  'linux': [
    'dbus',
    'third_party/speech-dispatcher',
  ],
  'win32': [],
}[TARGET_PLATFORM]
GENERATED_INCLUDE_DIRS = [
  'content',
  'mojo',
  'ui',
]
OTHER_HEADERS = [
  'content/common/content_export.h',
]
OTHER_SOURCES = [
  'content/app/startup_helper_win.cc',
]


def main():
  args = parse_args()
  target_arch = args.target_arch

  rm_rf(DIST_DIR)
  os.makedirs(DIST_DIR)

  for component in COMPONENTS:
    output_dir = os.path.join(SRC_DIR, get_output_dir(target_arch, component))
    copy_binaries(target_arch, component, output_dir)
    copy_generated_sources(target_arch, component, output_dir)

  copy_sources()
  create_zip()


def parse_args():
  parser = argparse.ArgumentParser(description='Create distribution')
  parser.add_argument('-t', '--target_arch', default='x64', help='x64 or ia32')
  return parser.parse_args()


def copy_binaries(target_arch, component, output_dir):
  config_dir = os.path.join(output_dir, get_configuration(target_arch))
  target_dir = os.path.join(MAIN_DIR, component)
  mkdir_p(target_dir)

  for binary in BINARIES['all'] + BINARIES[TARGET_PLATFORM]:
    shutil.copy2(os.path.join(config_dir, binary), target_dir)

  if component == 'shared_library':
    suffix = SHARED_LIBRARY_SUFFIX
  else:
    suffix = STATIC_LIBRARY_SUFFIX
  for library in glob.glob(os.path.join(config_dir, '*.{0}'.format(suffix))):
    shutil.copy2(library, target_dir)

  # Strip the copied binaries on Linux since they contain quite large
  # debug info.
  if TARGET_PLATFORM == 'linux':
    for binary in BINARIES[TARGET_PLATFORM]:
      binary_path = os.path.join(target_dir, os.path.basename(binary))
      # Static libraries are not stripped because it would remove
      # all the symbols in it.
      if not binary_path.endswith('.a'):
        subprocess.check_call(['strip', binary_path])


def copy_generated_sources(target_arch, component, output_dir):
  config = get_configuration(target_arch)
  target_dir = os.path.join(MAIN_DIR, component)
  for include_path in GENERATED_INCLUDE_DIRS:
    copy_headers(include_path,
                 relative_to=os.path.join(output_dir, config, 'gen'),
                 destination=os.path.join(target_dir, 'gen'))


def copy_sources():
  for include_path in INCLUDE_DIRS:
    copy_headers(include_path, relative_to=SRC_DIR, destination=DIST_SRC_DIR)

  for path in OTHER_HEADERS + OTHER_SOURCES:
    copy_source_file(os.path.join(SRC_DIR, path), relative_to=SRC_DIR,
                     destination=DIST_SRC_DIR)

  # Some headers assume this file is at the top of the include path. Rather
  # than forcing client apps to set up their include path specially, we'll
  # just copy it to the top.
  sk_user_config = os.path.join(SRC_DIR, 'third_party', 'skia', 'include',
                                'config', 'SkUserConfig.h')
  shutil.copy2(sk_user_config, DIST_SRC_DIR)


def copy_headers(relative_path, relative_to, destination):
  abs_path = os.path.join(relative_to, relative_path)
  for dirpath, dirnames, filenames in os.walk(abs_path):
    for filename in filenames:
      if os.path.splitext(filename)[1] != '.h':
        continue
      copy_source_file(os.path.join(dirpath, filename), relative_to=relative_to, destination=destination)


def copy_source_file(absolute_path, relative_to, destination):
  relative_path = os.path.relpath(absolute_path, start=relative_to)
  final_path = os.path.join(destination, relative_path)
  mkdir_p(os.path.dirname(final_path))
  shutil.copy2(absolute_path, final_path)


def create_zip():
  print "Zipping distribution..."
  zip_file = os.path.join(SOURCE_ROOT, 'libchromiumcontent.zip')
  safe_unlink(zip_file)
  zip_directory(MAIN_DIR, zip_file)


def zip_directory(root_directory, destination):
  with contextlib.closing(zipfile.ZipFile(destination, mode='w', compression=zipfile.ZIP_DEFLATED, allowZip64=True)) as z:
    for dirpath, dirnames, filenames in os.walk(root_directory):
      for filename in filenames:
        path = os.path.join(dirpath, filename)
        z.write(path, arcname=os.path.relpath(path, root_directory))


def mkdir_p(path):
  try:
    os.makedirs(path)
  except OSError as e:
    if e.errno != errno.EEXIST:
      raise


def rm_rf(path):
  try:
    shutil.rmtree(path)
  except OSError as e:
    if e.errno != errno.ENOENT:
      raise


def safe_unlink(path):
  try:
    os.unlink(path)
  except OSError as e:
    if e.errno != errno.ENOENT:
      raise


def is_newer(destination, source):
  return os.path.exists(destination) and \
    os.path.getmtime(destination) > os.path.getmtime(source)


if __name__ == '__main__':
  sys.exit(main())
