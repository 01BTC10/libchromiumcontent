#!/usr/bin/env python

import errno
import os
import shutil
import subprocess
import sys


SOURCE_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
VENDOR_DIR = os.path.join(SOURCE_ROOT, 'vendor')
DEPOT_TOOLS_DIR = os.path.join(VENDOR_DIR, 'depot_tools')
DEPOT_TOOLS_URL = \
    'https://chromium.googlesource.com/chromium/tools/depot_tools.git'
CHROMIUM_DIR = os.path.join(VENDOR_DIR, 'chromium')
SRC_DIR = os.path.join(CHROMIUM_DIR, 'src')


def main():
    os.chdir(SOURCE_ROOT)
    result = (subprocess.call(['git', 'submodule', 'sync']) or
              subprocess.call(['git', 'submodule', 'update',
                               '--init', '--recursive']))
    if result:
        return result

    print 'clone depot_tools'
    if not os.path.isdir(DEPOT_TOOLS_DIR):
        result = subprocess.call(['git', 'clone',
                                  DEPOT_TOOLS_URL, DEPOT_TOOLS_DIR])
        if result:
            return result

    print 'gclient.bat'
    if sys.platform in ['win32', 'cygwin']:
        if not os.path.isfile(os.path.join(DEPOT_TOOLS_DIR, 'python.bat')):
            gclient = os.path.join(DEPOT_TOOLS_DIR, 'gclient.bat')
            result = subprocess.call(['cmd.exe', '/c', gclient])
            if result:
                return result

    print 'rm .svn'
    # Clean out old svn checkout.
    if os.path.isdir(os.path.join(SRC_DIR, '.svn')):
        rm_rf(SRC_DIR)

    print 'fetch chromium'
    if not os.path.isdir(SRC_DIR):
        os.chdir(CHROMIUM_DIR)
        fetch = os.path.join(DEPOT_TOOLS_DIR, 'fetch.py')
        result = subprocess.call([fetch, 'chromium', '--nosvn=True'])
        if result:
            return result;

    print 'update'
    update = os.path.join(SOURCE_ROOT, 'script', 'update')
    return subprocess.call([sys.executable, update])


def rm_rf(path):
    try:
        shutil.rmtree(path)
    except OSError as e:
        if e.errno != errno.ENOENT:
            raise


if __name__ == '__main__':
    sys.exit(main())
